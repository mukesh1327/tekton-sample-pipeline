apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: imagebuild-task
spec:
  description: |-
    Buildah task builds source into a container image and then pushes it to a container registry.
    Buildah Task builds source into a container image using Project Atomic's Buildah build tool.It uses Buildah's support for building from dockerfiles, using its buildah bud command.This command executes the directives in the dockerfile to assemble a container image, then pushes that image to a container registry.
  params:
    - description: Reference of the image buildah will produce.
      name: image
      type: string
    - default: ''
      description: Tag name for the image
      name: image_tag
      type: string
    - default: ''
      description: Tag name for the image
      name: env_image_tag
      type: string
    - default: 'registry.redhat.io/rhel8/buildah@sha256:b48f410efa0ff8ab0db6ead420a5d8d866d64af846fece5efb185230d7ecf591'
      description: The location of the buildah builder image.
      name: builder_image
      type: string
    - default: vfs
      description: Set buildah storage driver
      name: storage_driver
      type: string
    - default: ./dockerfile
      description: Path to the dockerfile to build.
      name: dockerfile
      type: string
    - default: .
      description: Path to the directory to use as context.
      name: context
      type: string
    - default: 'true'
      description: Verify the TLS on the registry endpoint (for push/pull to a non-TLS registry)
      name: tlsverify
      type: string
    - default: oci
      description: 'The format of the built container, oci or docker'
      name: format
      type: string
    - default: ''
      description: Extra parameters passed for the build command when building images.
      name: build_extra_args
      type: string
    - default: ''
      description: Extra parameters passed for the push command when pushing images.
      name: push_extra_args
      type: string
    - default: 'false'
      description: Skip pushing the built image
      name: skip_push
      type: string
    - default: .
      description: project directory
      name: project_dir
      type: string
  results:
    - description: Digest of the image just built.
      name: image_digest
      type: string
    - description: image repository where the built image would be pushed to
      name: image_url
      type: string
  steps:
    - computeResources: {}
      image: $(params.builder_image)
      name: build-and-push
      script: |
        #!/bin/bash 

        ENTITLEMENT_VOLUME=""

        SHORT_COMMIT_ID=$(echo $(params.image_tag) | cut -c 1-7)
        image_tag=$(params.env_image_tag)${SHORT_COMMIT_ID}


        if [[ "$(workspaces.rhel-entitlement.bound)" == "true" ]]; then
          ENTITLEMENT_VOLUME="--volume /tmp/entitlement:/etc/pki/entitlement"
        fi


        buildah bud --storage-driver=$(params.storage_driver) \
          $ENTITLEMENT_VOLUME $(params.build_extra_args) \
          --format=$(params.format) --tls-verify=$(params.tlsverify) --no-cache \
          -f $(params.dockerfile) -t $(params.image):${image_tag} $(params.context)

        [[ "$(params.skip_push)" == "true" ]] && echo "Push skipped" && exit 0

        if [[ "$(workspaces.dockerconfig.bound)" == "true" ]]; then

          # if config.json exists at workspace root, we use that
          if test -f "$(workspaces.dockerconfig.path)/config.json"; then
            export DOCKER_CONFIG="$(workspaces.dockerconfig.path)"

          # else we look for .dockerconfigjson at the root
          elif test -f "$(workspaces.dockerconfig.path)/.dockerconfigjson"; then
            cp "$(workspaces.dockerconfig.path)/.dockerconfigjson" "$HOME/.docker/config.json"
            export DOCKER_CONFIG="$HOME/.docker"

          # need to error out if neither files are present
          else
            echo "neither 'config.json' nor '.dockerconfigjson' found at workspace root"
            exit 1
          fi
        fi

        buildah --storage-driver=$(params.storage_driver) push \
          $(params.push_extra_args) --tls-verify=$(params.tlsverify) \
          --digestfile /tmp/image-digest $(params.image):${image_tag} \
          docker://$(params.image):${image_tag}
        cat /tmp/image-digest | tee $(results.image_digest.path)
        echo "$(params.image):${image_tag}" | tee $(results.image_url.path)
      securityContext:
        capabilities:
          add:
            - SETFCAP
      volumeMounts:
        - mountPath: /var/lib/containers
          name: varlibcontainers
      workingDir: $(workspaces.source.path)/$(params.project_dir)
  volumes:
    - emptyDir: {}
      name: varlibcontainers
  workspaces:
    - name: source
    - description: An optional workspace that allows providing a .docker/config.json file for Buildah to access the container registry. The file should be placed at the root of the Workspace with name config.json or .dockerconfigjson.
      name: dockerconfig
      optional: true
    - description: An optional workspace that allows providing the entitlement keys for Buildah to access subscription. The mounted workspace contains entitlement.pem and entitlement-key.pem.
      mountPath: /tmp/entitlement
      name: rhel-entitlement
      optional: true